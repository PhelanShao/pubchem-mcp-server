"""化学结构格式转换器"""

import logging
from typing import Optional

logger = logging.getLogger("pubchem-mcp.converters")

class StructureConverter:
    """化学结构格式转换器"""
    
    @staticmethod
    def sdf_to_xyz(sdf_data: str) -> str:
        """将SDF格式转换为XYZ格式"""
        lines = sdf_data.strip().split('\n')
        
        try:
            # 提取原子数量
            counts_line = lines[3]
            atom_count = int(counts_line[:3].strip())
            
            # 构建XYZ文件
            xyz_lines = [str(atom_count), "Generated from PubChem SDF"]
            
            # 提取原子块
            for i in range(4, 4 + atom_count):
                if i < len(lines):
                    parts = lines[i].split()
                    if len(parts) >= 4:
                        x, y, z = parts[0:3]
                        atom_symbol = parts[3]
                        xyz_lines.append(f"{atom_symbol} {x} {y} {z}")
            
            return "\n".join(xyz_lines)
        except Exception as e:
            logger.error(f"转换SDF到XYZ格式出错: {str(e)}")
            return f"Error converting to XYZ: {str(e)}"
    
    @staticmethod
    def sdf_to_cif(sdf_data: str, cid: int, compound_name: str) -> str:
        """将SDF格式转换为CIF格式"""
        lines = sdf_data.strip().split('\n')
        
        try:
            # 提取原子数量
            counts_line = lines[3]
            atom_count = int(counts_line[:3].strip())
            
            # 构建CIF文件
            cif_lines = [
                f"data_{cid}",
                f"_chemical_name_systematic '{compound_name}'",
                "_chemical_name_common .",
                f"_chemical_compound_source 'PubChem CID: {cid}'",
                "_chemical_formula_moiety .",
                "_chemical_formula_sum .",
                "_chemical_formula_weight .",
                "loop_",
                "_atom_site_label",
                "_atom_site_type_symbol",
                "_atom_site_fract_x",
                "_atom_site_fract_y",
                "_atom_site_fract_z"
            ]
            
            # 提取原子块
            for i in range(4, 4 + atom_count):
                if i < len(lines):
                    parts = lines[i].split()
                    if len(parts) >= 4:
                        x, y, z = [float(coord) for coord in parts[0:3]]
                        atom_symbol = parts[3]
                        atom_idx = i - 3
                        
                        # 转换为分数坐标（简化处理）
                        cif_lines.append(f"{atom_symbol}{atom_idx} {atom_symbol} {x:.6f} {y:.6f} {z:.6f}")
            
            return "\n".join(cif_lines)
        except Exception as e:
            logger.error(f"转换SDF到CIF格式出错: {str(e)}")
            return f"Error converting to CIF: {str(e)}"
    
    @staticmethod
    def sdf_to_pdb(sdf_data: str, cid: int) -> str:
        """将SDF格式转换为PDB格式"""
        lines = sdf_data.strip().split('\n')
        
        try:
            # 提取原子数量
            counts_line = lines[3]
            atom_count = int(counts_line[:3].strip())
            
            # 构建PDB文件
            pdb_lines = [
                f"HEADER    PUBCHEM COMPOUND {cid}",
                f"TITLE     PUBCHEM COMPOUND {cid}",
                "AUTHOR    GENERATED BY PUBCHEM-MCP-SERVER"
            ]
            
            # 提取原子块
            for i in range(4, 4 + atom_count):
                if i < len(lines):
                    parts = lines[i].split()
                    if len(parts) >= 4:
                        x, y, z = [float(coord) for coord in parts[0:3]]
                        atom_symbol = parts[3]
                        atom_idx = i - 3
                        
                        # 格式化PDB ATOM记录
                        pdb_lines.append(
                            f"ATOM  {atom_idx:5d}  {atom_symbol:<3} LIG A   1    "
                            f"{x:8.3f}{y:8.3f}{z:8.3f}  1.00  0.00          {atom_symbol}"
                        )
            
            pdb_lines.append("END")
            return "\n".join(pdb_lines)
        except Exception as e:
            logger.error(f"转换SDF到PDB格式出错: {str(e)}")
            return f"Error converting to PDB: {str(e)}"
    
    @staticmethod
    def sdf_to_mol(sdf_data: str) -> str:
        """将SDF格式转换为MOL格式（本质上是提取SDF中的第一个分子）"""
        try:
            # MOL格式本质上是SDF格式的单分子形式
            mol_end_pos = sdf_data.find("M  END")
            if mol_end_pos < 0:
                return "Error: No MOL data found in SDF"
            
            # 包含"M  END"行
            return sdf_data[:mol_end_pos + 6]
        except Exception as e:
            logger.error(f"转换SDF到MOL格式出错: {str(e)}")
            return f"Error converting to MOL: {str(e)}"
    
    @classmethod
    def convert(cls, sdf_data: str, cid: int, compound_name: str, 
                output_format: str) -> Optional[str]:
        """转换结构格式
        
        Args:
            sdf_data: SDF格式的结构数据
            cid: 化合物ID
            compound_name: 化合物名称
            output_format: 目标格式(sdf/xyz/cif/pdb/mol)
            
        Returns:
            转换后的结构数据，如果转换失败则返回None
        """
        converters = {
            "sdf": lambda: sdf_data,
            "xyz": lambda: cls.sdf_to_xyz(sdf_data),
            "cif": lambda: cls.sdf_to_cif(sdf_data, cid, compound_name),
            "pdb": lambda: cls.sdf_to_pdb(sdf_data, cid),
            "mol": lambda: cls.sdf_to_mol(sdf_data)
        }
        
        converter = converters.get(output_format.lower())
        if not converter:
            logger.error(f"不支持的输出格式: {output_format}")
            return None
            
        try:
            return converter()
        except Exception as e:
            logger.error(f"结构转换失败: {str(e)}")
            return None